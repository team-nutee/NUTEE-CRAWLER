plugins {
    id 'java'
    id 'org.springframework.boot' version '2.3.3.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'org.asciidoctor.convert' version '1.5.3'
//    id 'java'
}

group = 'kr.nutee'
version = '0.0.1-SNAPSHOT'
//description = 'crawler'
description = 'nutee-crawler'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web:2.3.3.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.jsoup:jsoup:1.13.1'
    implementation 'org.projectlombok:lombok:1.18.12'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.3.3.RELEASE'
    compileOnly 'org.projectlombok:lombok'
    //
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    runtimeOnly 'mysql:mysql-connector-java'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
//    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor:2.0.2.RELEASE'
    testCompile("org.springframework.boot:spring-boot-starter-test")
    implementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    //
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}
ext {
    snippetsDir = file('build/generated-snippets')
}
test {
    useJUnitPlatform()
}

asciidoctor {
    attributes 'snippets': snippetsDir
    inputs.dir snippetsDir
    dependsOn test
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/asciidoc/html5/")
    into file("src/main/resources/static/docs")
}

build {
    dependsOn copyDocument
}

bootJar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

compileJava.options.encoding("UTF-8")
tasks.withType(JavaCompile) {
    options.encoding("UTF-8")
}

allprojects {
    System.setProperty('JAVA_TOOL_OPTIONS', "-Dfile.encoding=UTF8")
}